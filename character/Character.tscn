[gd_scene load_steps=28 format=2]

[ext_resource path="res://character/nodes/Body_parts/BodyPart.tscn" type="PackedScene" id=1]
[ext_resource path="res://character/nodes/Body_parts/damageable/parts/Head.tscn" type="PackedScene" id=2]
[ext_resource path="res://character/nodes/Body_parts/damageable/parts/ArmTop.tscn" type="PackedScene" id=3]
[ext_resource path="res://character/nodes/Body_parts/damageable/parts/ArmBottom.tscn" type="PackedScene" id=4]
[ext_resource path="res://character/nodes/grab_point/GrabPoint.tscn" type="PackedScene" id=5]
[ext_resource path="res://character/nodes/Body_parts/damageable/parts/LegTop.tscn" type="PackedScene" id=6]
[ext_resource path="res://character/nodes/Body_parts/damageable/parts/LegBottom.tscn" type="PackedScene" id=7]
[ext_resource path="res://character/nodes/animation_player.gd" type="Script" id=8]
[ext_resource path="res://character/nodes/arms_state_machine.gd" type="Script" id=9]

[sub_resource type="PhysicsMaterial" id=13]
friction = 0.2
absorbent = true

[sub_resource type="GDScript" id=14]
script/source = "extends Damageable
class_name Character

signal body_parts_list_set(body_parts_list)

#onready var raycast = $RayCast2D
onready var animationManager = $AnimationManager

export(bool) var enabled: bool = true

export(NodePath) var targetNodePath
onready var targetNode = get_node(targetNodePath)

export(float) var power = 3
export(float) var maxAppliedTorque = 100
export(float) var maxAppliedDamp = 100
export(float) var brakePower = 5
#export(float) var bodyPower = 1
export(float) var maxAppliableAngularV = 50

export(bool) var is_scaled: bool = false

export(float) var movement_acceleration: float = 20000.0

var _body_parts_list: Array = [self]

var _pins_list: Dictionary = {}

var _scale_init_done = true


func setup(properties: Dictionary) -> void:
	position = properties.position
	.setup(properties)
	

func _ready():
	_body_parts_list = _get_all_nodes($BodyParts, _body_parts_list)
	emit_signal(\"body_parts_list_set\", _body_parts_list)
	_set_body_parts_layers(_body_parts_list)
	_set_collision_exception(_body_parts_list)


func _integrate_forces(state):
	_keep_body_straight(state)


func get_property(property_name):
	if not $Properties.get(property_name) == null:
		return $Properties.get(property_name)
	else:
		print(\"Uknown given property !\")
		get_tree().quit()


func get_body_parts() -> Array:
	return _body_parts_list


func clear_exception_with(body: RigidBody2D):
	remove_collision_exception_with(body)


func _get_all_nodes(node:Node, array:Array) -> Array:
	for N in node.get_children():
		if N.is_class(\"RigidBody2D\"):
			if N.get_child_count() > 0:
				array.append(N)
				array = _get_all_nodes(N, array)
			else:
				array.append(N)
	return array


func _set_collision_exception(array:Array) -> void:
	
	for element in array:
		for other_element in array:
			if(other_element != element):
				element.add_collision_exception_with(other_element)


func _set_body_parts_layers(array: Array) -> void:
	
	for element in array:
		if element is BodyPart:
			element.update_layers_and_masks(_layer_array, _mask_array)


func _keep_body_straight(state: Physics2DDirectBodyState) -> void:
	
	var targetAngle = targetNode.rotation
	var selfAngle = global_rotation
	var current_velocity = state.angular_velocity
	var diffAngle = 0

	if(abs(targetAngle - selfAngle) > PI):
		var angSign = sign(targetAngle - selfAngle)
		diffAngle = (-PI*angSign)+((targetAngle - selfAngle)+(-PI*angSign))
	else:
		diffAngle = targetAngle - selfAngle
	
	var angularVToAim = sign(diffAngle) * ease(inverse_lerp(0, 3.14, abs(diffAngle)), 0.1) * power
	
	if(sign(angularVToAim) != sign(angular_velocity)):
		angularVToAim += brakePower * (abs(abs(angularVToAim) - abs(angular_velocity))) * sign(angularVToAim)
	
	if(abs(angularVToAim) > maxAppliableAngularV):
		angularVToAim = maxAppliableAngularV * sign(angularVToAim)
	
	if(current_velocity < angularVToAim):
		
		var tempVelocity = angularVToAim - current_velocity
	
		if tempVelocity > maxAppliedTorque:
			tempVelocity = maxAppliedTorque
	
		state.angular_velocity += tempVelocity
	
	elif(current_velocity > angularVToAim):
	
		var tempDamp = current_velocity - angularVToAim
	
		if tempDamp > maxAppliedDamp:
			tempDamp = maxAppliedDamp
	
		state.angular_velocity -= tempDamp"

[sub_resource type="CapsuleShape2D" id=2]
resource_local_to_scene = true
radius = 1.44157
height = 25.4696

[sub_resource type="PhysicsMaterial" id=1]
friction = 0.2
absorbent = true

[sub_resource type="PhysicsMaterial" id=15]
friction = 0.2
absorbent = true

[sub_resource type="GDScript" id=16]
script/source = "extends Damageable
class_name BodyPart

export(NodePath) var targetNodePath
onready var targetNode = get_node(targetNodePath)

export(bool) var enabled: bool = true

export(float) var POWER = 20
export(float) var MAX_APPLIED_AVELOCITY = 100
export(float) var MAX_APPLIED_DAMPENING = 100
export(float) var BRAKE_POWER = 1

export(bool) var ANGLE_RESTRICTION = false
export(float) var MIN_ANGLE = -0
export(float) var MAX_ANGLE = -0
export(float) var RESTRICTION_POWER = 5

export(int) var MAX_AVELOCITY_VARIATION = 15


func _scale_self() -> void:
	var collision_shape = get_node(\"./CollisionShape2D\").get_shape()
	if collision_shape is CapsuleShape2D:
		collision_shape.set_height(_scale_vector(collision_shape.get_height()))
		collision_shape.set_radius(_scale_vector(collision_shape.get_radius()))
	elif collision_shape is CircleShape2D:
		collision_shape.set_radius(_scale_vector(collision_shape.get_radius()))

	get_node(\"./CollisionShape2D\").position = _scale_vector(get_node(\"./CollisionShape2D\").position)
	get_node(\"Sprite\").scale = _scale_vector(get_node(\"Sprite\").scale)
	get_node(\"Sprite\").position = _scale_vector(get_node(\"Sprite\").position)

	position = _scale_vector(position)
	mass = _scale_mass(mass)
	POWER = _scale_speed(POWER)
	BRAKE_POWER = _scale_speed(BRAKE_POWER)
	MAX_AVELOCITY_VARIATION = _scale_speed(MAX_AVELOCITY_VARIATION)
#	gravity_scale = _scale_speed(gravity_scale)


func _integrate_forces(state):
	
	if !enabled:
		return
	
	var targetAngle = targetNode.rotation
	var selfAngle = rotation
	
	var current_velocity = state.angular_velocity
	var temp_power = POWER
	
	if(ANGLE_RESTRICTION):
		if(MIN_ANGLE < MAX_ANGLE):
			if(selfAngle < MIN_ANGLE):
				temp_power += RESTRICTION_POWER * abs(abs(MIN_ANGLE) - abs(selfAngle))
			elif(selfAngle > MAX_ANGLE):
				temp_power += RESTRICTION_POWER * abs(abs(MIN_ANGLE) - abs(selfAngle))
		else:
			if(selfAngle < MIN_ANGLE && selfAngle > MAX_ANGLE):
				temp_power += RESTRICTION_POWER * abs(abs(MIN_ANGLE) - abs(selfAngle))
	
	var diffAngle = 0
	
	if(abs(targetAngle - selfAngle) > PI):
		var angSign = sign(targetAngle - selfAngle)
		diffAngle = (-PI*angSign)+((targetAngle - selfAngle)+(-PI*angSign))
	else:
		diffAngle = targetAngle - selfAngle
	
	var angularVToAim = sign(diffAngle) * ease(inverse_lerp(0, 3.14, abs(diffAngle)), 0.2) * temp_power
	
	if(sign(angularVToAim) != sign(angular_velocity)):
		angularVToAim += BRAKE_POWER * (abs(abs(angularVToAim) - abs(angular_velocity))) * sign(angularVToAim)
	
	if(abs(angularVToAim) > MAX_AVELOCITY_VARIATION):
		angularVToAim = MAX_AVELOCITY_VARIATION * sign(angularVToAim)
	
	
	if(current_velocity < angularVToAim):
		
		var tempVelocity = angularVToAim - current_velocity
	
		if tempVelocity > MAX_APPLIED_AVELOCITY:
			tempVelocity = MAX_APPLIED_AVELOCITY
	
		state.angular_velocity += tempVelocity
	
	elif(current_velocity > angularVToAim):
	
		var tempDamp = current_velocity - angularVToAim
	
		if tempDamp > MAX_APPLIED_DAMPENING:
			tempDamp = MAX_APPLIED_DAMPENING
	
		state.angular_velocity -= tempDamp


func become_inert(exceptions: Array = []):
	
	enabled = false
	
#	yield(get_tree().create_timer(.5), \"timeout\")
#
#	for body in get_collision_exceptions():
#		if !exceptions.has(body):
#			remove_collision_exception_with(body)
#			body.remove_collision_exception_with(self)


func _die():
	
	var exceptions = []
	
#	for child in get_children():
#		if child is PinJoint2D:
#			if child.get_node(child.node_a).get_instance_id() == get_instance_id():
#				child.node_a = \"\"
#			elif child.get_node(child.node_b).get_instance_id() == get_instance_id():
#				child.node_b = \"\"
#
#		if child is Damageable:
#			child.become_inert([self])
#			exceptions.append(child)
	
	become_inert(exceptions)
	._die()"

[sub_resource type="PhysicsMaterial" id=17]
friction = 0.2
absorbent = true

[sub_resource type="GDScript" id=18]
script/source = "extends Damageable
class_name BodyPart

export(NodePath) var targetNodePath
onready var targetNode = get_node(targetNodePath)

export(bool) var enabled: bool = true

export(float) var POWER = 20
export(float) var MAX_APPLIED_AVELOCITY = 100
export(float) var MAX_APPLIED_DAMPENING = 100
export(float) var BRAKE_POWER = 1

export(bool) var ANGLE_RESTRICTION = false
export(float) var MIN_ANGLE = -0
export(float) var MAX_ANGLE = -0
export(float) var RESTRICTION_POWER = 5

export(int) var MAX_AVELOCITY_VARIATION = 15


func _scale_self() -> void:
	var collision_shape = get_node(\"./CollisionShape2D\").get_shape()
	if collision_shape is CapsuleShape2D:
		collision_shape.set_height(_scale_vector(collision_shape.get_height()))
		collision_shape.set_radius(_scale_vector(collision_shape.get_radius()))
	elif collision_shape is CircleShape2D:
		collision_shape.set_radius(_scale_vector(collision_shape.get_radius()))

	get_node(\"./CollisionShape2D\").position = _scale_vector(get_node(\"./CollisionShape2D\").position)
	get_node(\"Sprite\").scale = _scale_vector(get_node(\"Sprite\").scale)
	get_node(\"Sprite\").position = _scale_vector(get_node(\"Sprite\").position)

	position = _scale_vector(position)
	mass = _scale_mass(mass)
	POWER = _scale_speed(POWER)
	BRAKE_POWER = _scale_speed(BRAKE_POWER)
	MAX_AVELOCITY_VARIATION = _scale_speed(MAX_AVELOCITY_VARIATION)
#	gravity_scale = _scale_speed(gravity_scale)


func _integrate_forces(state):
	
	if !enabled:
		return
	
	var targetAngle = targetNode.rotation
	var selfAngle = rotation
	
	var current_velocity = state.angular_velocity
	var temp_power = POWER
	
	if(ANGLE_RESTRICTION):
		if(MIN_ANGLE < MAX_ANGLE):
			if(selfAngle < MIN_ANGLE):
				temp_power += RESTRICTION_POWER * abs(abs(MIN_ANGLE) - abs(selfAngle))
			elif(selfAngle > MAX_ANGLE):
				temp_power += RESTRICTION_POWER * abs(abs(MIN_ANGLE) - abs(selfAngle))
		else:
			if(selfAngle < MIN_ANGLE && selfAngle > MAX_ANGLE):
				temp_power += RESTRICTION_POWER * abs(abs(MIN_ANGLE) - abs(selfAngle))
	
	var diffAngle = 0
	
	if(abs(targetAngle - selfAngle) > PI):
		var angSign = sign(targetAngle - selfAngle)
		diffAngle = (-PI*angSign)+((targetAngle - selfAngle)+(-PI*angSign))
	else:
		diffAngle = targetAngle - selfAngle
	
	var angularVToAim = sign(diffAngle) * ease(inverse_lerp(0, 3.14, abs(diffAngle)), 0.2) * temp_power
	
	if(sign(angularVToAim) != sign(angular_velocity)):
		angularVToAim += BRAKE_POWER * (abs(abs(angularVToAim) - abs(angular_velocity))) * sign(angularVToAim)
	
	if(abs(angularVToAim) > MAX_AVELOCITY_VARIATION):
		angularVToAim = MAX_AVELOCITY_VARIATION * sign(angularVToAim)
	
	
	if(current_velocity < angularVToAim):
		
		var tempVelocity = angularVToAim - current_velocity
	
		if tempVelocity > MAX_APPLIED_AVELOCITY:
			tempVelocity = MAX_APPLIED_AVELOCITY
	
		state.angular_velocity += tempVelocity
	
	elif(current_velocity > angularVToAim):
	
		var tempDamp = current_velocity - angularVToAim
	
		if tempDamp > MAX_APPLIED_DAMPENING:
			tempDamp = MAX_APPLIED_DAMPENING
	
		state.angular_velocity -= tempDamp


func become_inert(exceptions: Array = []):
	
	enabled = false
	
#	yield(get_tree().create_timer(.5), \"timeout\")
#
#	for body in get_collision_exceptions():
#		if !exceptions.has(body):
#			remove_collision_exception_with(body)
#			body.remove_collision_exception_with(self)


func _die():
	
	var exceptions = []
	
#	for child in get_children():
#		if child is PinJoint2D:
#			if child.get_node(child.node_a).get_instance_id() == get_instance_id():
#				child.node_a = \"\"
#			elif child.get_node(child.node_b).get_instance_id() == get_instance_id():
#				child.node_b = \"\"
#
#		if child is Damageable:
#			child.become_inert([self])
#			exceptions.append(child)
	
	become_inert(exceptions)
	._die()"

[sub_resource type="Animation" id=3]
tracks/0/type = "value"
tracks/0/path = NodePath("TorsoLegAxle:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.2 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("TorsoLegAxle/LegTopBottomAxle:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.2 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("TorsoLegAxle2:rotation_degrees")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.2 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("TorsoLegAxle2/LegTopBottomAxle2:rotation_degrees")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0.2 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=4]
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("TorsoLegAxle:rotation_degrees")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ -35.0, 0.0, 10.0, 20.0, 10.0, -10.0, -45.0, -60.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("TorsoLegAxle/LegTopBottomAxle:rotation_degrees")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 30.0, 15.0, 10.0, 30.0, 60.0, 80.0, 45.0, 10.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("TorsoLegAxle2:rotation_degrees")
tracks/2/interp = 2
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 10.0, -10.0, -45.0, -60.0, -35.0, 0.0, 10.0, 20.0 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("TorsoLegAxle2/LegTopBottomAxle2:rotation_degrees")
tracks/3/interp = 2
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 60.0, 80.0, 45.0, 10.0, 30.0, 15.0, 10.0, 30.0 ]
}

[sub_resource type="Animation" id=5]
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("TorsoLegAxle:rotation_degrees")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 35.0, 0.0, -10.0, -20.0, -10.0, 10.0, 45.0, 60.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("TorsoLegAxle/LegTopBottomAxle:rotation_degrees")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ -30.0, -15.0, -10.0, -30.0, -60.0, -80.0, -45.0, -10.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("TorsoLegAxle2:rotation_degrees")
tracks/2/interp = 2
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ -10.0, 10.0, 45.0, 60.0, 35.0, 0.0, -10.0, -20.0 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("TorsoLegAxle2/LegTopBottomAxle2:rotation_degrees")
tracks/3/interp = 2
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ -60.0, -80.0, -45.0, -10.0, -30.0, -15.0, -10.0, -30.0 ]
}

[sub_resource type="AnimationNodeAnimation" id=6]
animation = "Running"

[sub_resource type="AnimationNodeAnimation" id=7]
animation = "RunningLeft"

[sub_resource type="AnimationNodeAnimation" id=8]
animation = "Idle"

[sub_resource type="AnimationNodeBlendSpace1D" id=9]
blend_point_0/node = SubResource( 6 )
blend_point_0/pos = 1.0
blend_point_1/node = SubResource( 7 )
blend_point_1/pos = -1.0
blend_point_2/node = SubResource( 8 )
blend_point_2/pos = 0.0

[sub_resource type="AnimationNodeTimeScale" id=10]

[sub_resource type="AnimationNodeTimeScale" id=11]

[sub_resource type="AnimationNodeBlendTree" id=12]
graph_offset = Vector2( 0, -63.5 )
nodes/BlendSpace1D/node = SubResource( 9 )
nodes/BlendSpace1D/position = Vector2( 60, -20 )
nodes/RunSpeed/node = SubResource( 10 )
nodes/RunSpeed/position = Vector2( 500, 20 )
nodes/TimeScale/node = SubResource( 11 )
nodes/TimeScale/position = Vector2( 300, 0 )
nodes/output/position = Vector2( 740, 20 )
node_connections = [ "output", 0, "RunSpeed", "RunSpeed", 0, "TimeScale", "TimeScale", 0, "BlendSpace1D" ]

[node name="Character" instance=ExtResource( 1 )]
collision_layer = 0
collision_mask = 0
mass = 5.5
physics_material_override = SubResource( 13 )
continuous_cd = 1
script = SubResource( 14 )
BOUND_BOX = {
"height": 150.0,
"offset_x": 0.0,
"offset_y": 0.0,
"width": 50.0
}
MAX_HEALTH = 1.0
targetNodePath = NodePath("Ghost/TorsoAxle")
brakePower = 2.0

[node name="Sprite" parent="." index="0"]
scale = Vector2( 0.3, 0.3 )
region_rect = Rect2( 86, 0, 11, 95 )

[node name="CollisionShape2D" parent="." index="1"]
shape = SubResource( 2 )

[node name="BodyParts" type="Node2D" parent="." index="2"]

[node name="Head" parent="BodyParts" index="0" instance=ExtResource( 2 )]
editor/display_folded = true
position = Vector2( 0, -13.7864 )
collision_layer = 0
collision_mask = 0
mass = 0.6
physics_material_override = SubResource( 1 )
continuous_cd = 1
targetNodePath = NodePath("../../Ghost/TorsoHeadAxle")

[node name="HeadTorsoPin" type="PinJoint2D" parent="BodyParts/Head" index="2"]
visible = false
position = Vector2( 0, 0.00039959 )
node_a = NodePath("../../..")
node_b = NodePath("..")

[node name="ArmTop" parent="BodyParts" index="1" instance=ExtResource( 3 )]
editor/display_folded = true
position = Vector2( 0, -10.1763 )
collision_layer = 0
collision_mask = 0
mass = 0.6
physics_material_override = SubResource( 15 )
continuous_cd = 1
script = SubResource( 16 )
targetNodePath = NodePath("../../Ghost/TorsoAxle/TorsoArmAxle")

[node name="TorsoArmPin" type="PinJoint2D" parent="BodyParts/ArmTop" index="2"]
visible = false
position = Vector2( 0, 0.000300407 )
node_a = NodePath("../../..")
node_b = NodePath("..")

[node name="ArmBottom" parent="BodyParts/ArmTop" index="3" instance=ExtResource( 4 )]
editor/display_folded = true
position = Vector2( 0, 11.4021 )
mass = 0.4
physics_material_override = SubResource( 1 )
continuous_cd = 1
targetNodePath = NodePath("../../../Ghost/TorsoAxle/TorsoArmAxle/ArmTopBotomAxle")

[node name="ArmTopBottomPin" type="PinJoint2D" parent="BodyParts/ArmTop/ArmBottom" index="2"]
visible = false
position = Vector2( 0, 0.000200391 )
node_a = NodePath("../..")
node_b = NodePath("..")

[node name="RightGrabPoint" parent="BodyParts/ArmTop/ArmBottom" index="3" instance=ExtResource( 5 )]

[node name="ArmTop2" parent="BodyParts" index="2" instance=ExtResource( 3 )]
editor/display_folded = true
position = Vector2( 0, -10.176 )
collision_layer = 0
collision_mask = 0
mass = 0.6
physics_material_override = SubResource( 17 )
continuous_cd = 1
script = SubResource( 18 )
targetNodePath = NodePath("../../Ghost/TorsoAxle/TorsoArmAxle2")

[node name="TorsoArmPin2" type="PinJoint2D" parent="BodyParts/ArmTop2" index="2"]
visible = false
node_a = NodePath("../../..")
node_b = NodePath("..")

[node name="ArmBottom2" parent="BodyParts/ArmTop2" index="3" instance=ExtResource( 4 )]
editor/display_folded = true
position = Vector2( 0, 11.4021 )
mass = 0.4
physics_material_override = SubResource( 1 )
continuous_cd = 1
targetNodePath = NodePath("../../../Ghost/TorsoAxle/TorsoArmAxle2/ArmTopBotomAxle2")

[node name="ArmTopBottomPin2" type="PinJoint2D" parent="BodyParts/ArmTop2/ArmBottom2" index="0"]
visible = false
position = Vector2( 0, -0.000100017 )
node_a = NodePath("../..")
node_b = NodePath("..")

[node name="LeftGrabPoint" parent="BodyParts/ArmTop2/ArmBottom2" index="3" instance=ExtResource( 5 )]

[node name="LegTop" parent="BodyParts" index="3" instance=ExtResource( 6 )]
editor/display_folded = true
position = Vector2( 0, 13.3132 )
collision_layer = 0
collision_mask = 0
physics_material_override = SubResource( 1 )
continuous_cd = 1
targetNodePath = NodePath("../../Ghost/TorsoLegAxle")
POWER = 30.0
MAX_APPLIED_AVELOCITY = 200.0
MAX_APPLIED_DAMPENING = 200.0
MAX_AVELOCITY_VARIATION = 40

[node name="TorsoLegPin" type="PinJoint2D" parent="BodyParts/LegTop" index="2"]
visible = false
position = Vector2( 0, -0.000200272 )
node_a = NodePath("../../..")
node_b = NodePath("..")

[node name="LegBottom" parent="BodyParts/LegTop" index="3" instance=ExtResource( 7 )]
editor/display_folded = true
position = Vector2( 0, 17.4546 )
mass = 0.6
physics_material_override = SubResource( 1 )
continuous_cd = 1
targetNodePath = NodePath("../../../Ghost/TorsoLegAxle/LegTopBottomAxle")
POWER = 30.0
MAX_APPLIED_AVELOCITY = 200.0
MAX_APPLIED_DAMPENING = 200.0
MAX_AVELOCITY_VARIATION = 40

[node name="LegTopBottomPin" type="PinJoint2D" parent="BodyParts/LegTop/LegBottom" index="2"]
visible = false
position = Vector2( 0, 0.000200272 )
node_a = NodePath("../..")
node_b = NodePath("..")

[node name="LegTop2" parent="BodyParts" index="4" instance=ExtResource( 6 )]
editor/display_folded = true
position = Vector2( 0, 13.3132 )
collision_layer = 0
collision_mask = 0
physics_material_override = SubResource( 1 )
continuous_cd = 1
targetNodePath = NodePath("../../Ghost/TorsoLegAxle2")
POWER = 30.0
MAX_APPLIED_AVELOCITY = 200.0
MAX_APPLIED_DAMPENING = 200.0
MAX_AVELOCITY_VARIATION = 40

[node name="TorsoLegPin2" type="PinJoint2D" parent="BodyParts/LegTop2" index="2"]
visible = false
position = Vector2( 0, -0.000200272 )
node_a = NodePath("../../..")
node_b = NodePath("..")

[node name="LegBottom2" parent="BodyParts/LegTop2" index="3" instance=ExtResource( 7 )]
editor/display_folded = true
position = Vector2( 0, 17.4546 )
mass = 0.6
physics_material_override = SubResource( 1 )
continuous_cd = 1
targetNodePath = NodePath("../../../Ghost/TorsoLegAxle2/LegTopBottomAxle2")
POWER = 30.0
MAX_APPLIED_AVELOCITY = 200.0
MAX_APPLIED_DAMPENING = 200.0
MAX_AVELOCITY_VARIATION = 40

[node name="LegTopBottomPin2" type="PinJoint2D" parent="BodyParts/LegTop2/LegBottom2" index="2"]
visible = false
position = Vector2( 0, 0.000200272 )
node_a = NodePath("../..")
node_b = NodePath("..")

[node name="Ghost" type="Node2D" parent="." index="3"]
editor/display_folded = true

[node name="TorsoHeadAxle" type="Position2D" parent="Ghost" index="0"]
position = Vector2( 0, -13.8082 )

[node name="TorsoAxle" type="Position2D" parent="Ghost" index="1"]
editor/display_folded = true
position = Vector2( 0, 12.493 )

[node name="TorsoArmAxle" type="Position2D" parent="Ghost/TorsoAxle" index="0"]
editor/display_folded = true
position = Vector2( -1.93715e-007, -22.9125 )

[node name="ArmTopBotomAxle" type="Position2D" parent="Ghost/TorsoAxle/TorsoArmAxle" index="0"]
position = Vector2( 0, 10.6509 )

[node name="TorsoArmAxle2" type="Position2D" parent="Ghost/TorsoAxle" index="1"]
editor/display_folded = true
position = Vector2( 1.66893e-006, -22.9125 )

[node name="ArmTopBotomAxle2" type="Position2D" parent="Ghost/TorsoAxle/TorsoArmAxle2" index="0"]
position = Vector2( 0, 10.6509 )

[node name="TorsoLegAxle" type="Position2D" parent="Ghost" index="2"]
editor/display_folded = true
position = Vector2( -4.17233e-007, 12.4927 )

[node name="LegTopBottomAxle" type="Position2D" parent="Ghost/TorsoLegAxle" index="0"]
position = Vector2( 0, 16.907 )

[node name="TorsoLegAxle2" type="Position2D" parent="Ghost" index="3"]
editor/display_folded = true
position = Vector2( 5.36442e-007, 12.4927 )

[node name="LegTopBottomAxle2" type="Position2D" parent="Ghost/TorsoLegAxle2" index="0"]
position = Vector2( 0, 16.907 )

[node name="AnimationManager" type="AnimationPlayer" parent="." index="4"]
root_node = NodePath("../Ghost")
playback_process_mode = 0
anims/Idle = SubResource( 3 )
anims/Running = SubResource( 4 )
anims/RunningLeft = SubResource( 5 )
script = ExtResource( 8 )

[node name="AnimationTree" type="AnimationTree" parent="." index="5"]
tree_root = SubResource( 12 )
anim_player = NodePath("../AnimationManager")
active = true
process_mode = 0
parameters/BlendSpace1D/blend_position = 0.0
parameters/RunSpeed/scale = 2.0
parameters/TimeScale/scale = 1.0

[node name="ArmsStateMachine" type="Node" parent="." index="6"]
script = ExtResource( 9 )

