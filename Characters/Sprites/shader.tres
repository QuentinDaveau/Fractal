[gd_resource type="ShaderMaterial" load_steps=24 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=2]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarConstant" id=3]
constant = 5.0

[sub_resource type="VisualShaderNodeVectorOp" id=4]
output_port_for_preview = 0
operator = 3

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=7]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id=8]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=9]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=10]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeColorConstant" id=11]
constant = Color( 0, 0, 1, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=12]

[sub_resource type="VisualShaderNodeVectorInterp" id=13]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=14]

[sub_resource type="VisualShaderNodeScalarConstant" id=15]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarOp" id=16]
operator = 3

[sub_resource type="VisualShaderNodeScalarConstant" id=17]
constant = 2.0

[sub_resource type="VisualShaderNodeColorConstant" id=18]

[sub_resource type="VisualShaderNodeScalarConstant" id=19]
output_port_for_preview = 0
constant = 1.0

[sub_resource type="VisualShaderNodeScalarFunc" id=20]
function = 14

[sub_resource type="VisualShaderNodeVectorDecompose" id=21]

[sub_resource type="VisualShaderNodeScalarFunc" id=22]
function = 14

[sub_resource type="VisualShader" id=23]
code = "shader_type canvas_item;



void vertex() {
// Sortie:0

}

void fragment() {
// Color:31
	vec3 n_out31p0;
	float n_out31p1;
	n_out31p0 = vec3(1.000000,1.000000,1.000000);
	n_out31p1 = 1.000000;

// Scalar:4
	float n_out4p0;
	n_out4p0 = 1.000000;

// Color:24
	vec3 n_out24p0;
	float n_out24p1;
	n_out24p0 = vec3(0.000000,0.000000,1.000000);
	n_out24p1 = 1.000000;

// Color:25
	vec3 n_out25p0;
	float n_out25p1;
	n_out25p0 = vec3(1.000000,1.000000,1.000000);
	n_out25p1 = 1.000000;

// Entr√©e:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// Scalar:13
	float n_out13p0;
	n_out13p0 = 5.000000;

// VectorOp:11
	vec3 n_out11p0;
	n_out11p0 = n_out2p0 * vec3(n_out13p0);

// VectorDecompose:8
	float n_out8p0;
	float n_out8p1;
	float n_out8p2;
	n_out8p0 = n_out11p0.x;
	n_out8p1 = n_out11p0.y;
	n_out8p2 = n_out11p0.z;

// ScalarFunc:9
	float n_out9p0;
	n_out9p0 = floor(n_out8p0);

// ScalarOp:21
	float n_out21p0;
	n_out21p0 = n_out8p0 - n_out9p0;

// ScalarFunc:7
	float n_out7p0;
	n_out7p0 = floor(n_out8p1);

// ScalarOp:22
	float n_out22p0;
	n_out22p0 = n_out8p1 - n_out7p0;

// ScalarOp:18
	float n_out18p0;
	n_out18p0 = n_out21p0 - n_out22p0;

// ScalarFunc:19
	float n_out19p0;
	n_out19p0 = sign(n_out18p0);

// Scalar:28
	float n_out28p0;
	n_out28p0 = 1.000000;

// ScalarOp:27
	float n_out27p0;
	n_out27p0 = n_out19p0 + n_out28p0;

// Scalar:30
	float n_out30p0;
	n_out30p0 = 2.000000;

// ScalarOp:29
	float n_out29p0;
	n_out29p0 = n_out27p0 / n_out30p0;

// VectorInterp:26
	vec3 n_out26p0;
	n_out26p0 = mix( n_out24p0 , n_out25p0 , vec3(n_out29p0) );

// Sortie:0
	COLOR.rgb = n_out31p0;
	COLOR.a = n_out4p0;
	NORMALMAP = n_out26p0;

}

void light() {
// Sortie:0

}
"
graph_offset = Vector2( 751.084, -42.312 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1520, 180 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( 120, 160 )
nodes/fragment/4/node = SubResource( 19 )
nodes/fragment/4/position = Vector2( 120, 360 )
nodes/fragment/7/node = SubResource( 20 )
nodes/fragment/7/position = Vector2( 740, -80 )
nodes/fragment/8/node = SubResource( 21 )
nodes/fragment/8/position = Vector2( 520, -20 )
nodes/fragment/9/node = SubResource( 22 )
nodes/fragment/9/position = Vector2( 740, -160 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 340, -20 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( 980, -60 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 100, -20 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( 1340, -60 )
nodes/fragment/17/node = SubResource( 5 )
nodes/fragment/17/position = Vector2( 340, 160 )
nodes/fragment/18/node = SubResource( 6 )
nodes/fragment/18/position = Vector2( 780, 240 )
nodes/fragment/19/node = SubResource( 7 )
nodes/fragment/19/position = Vector2( 980, 280 )
nodes/fragment/21/node = SubResource( 9 )
nodes/fragment/21/position = Vector2( 620, 140 )
nodes/fragment/22/node = SubResource( 10 )
nodes/fragment/22/position = Vector2( 580, 360 )
nodes/fragment/24/node = SubResource( 11 )
nodes/fragment/24/position = Vector2( 980, 520 )
nodes/fragment/25/node = SubResource( 12 )
nodes/fragment/25/position = Vector2( 980, 600 )
nodes/fragment/26/node = SubResource( 13 )
nodes/fragment/26/position = Vector2( 1600, 440 )
nodes/fragment/27/node = SubResource( 14 )
nodes/fragment/27/position = Vector2( 1200, 340 )
nodes/fragment/28/node = SubResource( 15 )
nodes/fragment/28/position = Vector2( 980, 440 )
nodes/fragment/29/node = SubResource( 16 )
nodes/fragment/29/position = Vector2( 1380, 340 )
nodes/fragment/30/node = SubResource( 17 )
nodes/fragment/30/position = Vector2( 1180, 440 )
nodes/fragment/31/node = SubResource( 18 )
nodes/fragment/31/position = Vector2( 1220, 160 )
nodes/fragment/connections = PoolIntArray( 4, 0, 0, 1, 2, 0, 11, 0, 11, 0, 8, 0, 13, 0, 11, 1, 13, 0, 14, 1, 18, 0, 19, 0, 8, 2, 12, 2, 8, 0, 9, 0, 8, 1, 7, 0, 2, 0, 17, 0, 8, 0, 21, 0, 9, 0, 21, 1, 21, 0, 18, 0, 8, 1, 22, 0, 7, 0, 22, 1, 22, 0, 18, 1, 9, 0, 12, 0, 7, 0, 12, 1, 12, 0, 14, 0, 24, 0, 26, 0, 25, 0, 26, 1, 28, 0, 27, 1, 19, 0, 27, 0, 27, 0, 29, 0, 30, 0, 29, 1, 29, 0, 26, 2, 31, 0, 0, 0, 26, 0, 0, 3 )

[resource]
shader = SubResource( 23 )

